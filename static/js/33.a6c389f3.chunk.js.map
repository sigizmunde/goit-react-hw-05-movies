{"version":3,"file":"static/js/33.a6c389f3.chunk.js","mappings":"kQAEaA,EAAYC,EAAAA,GAAAA,IAAH,yMAcTC,EAAMD,EAAAA,GAAAA,IAAH,4CAIHE,EAAUF,EAAAA,GAAAA,IAAH,qLAaPG,EAAiBH,EAAAA,GAAAA,IAAH,iN,SC+B3B,EA1DqB,WAAO,IAAD,IACjBI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAW,CAAEC,SAAUP,IAAWQ,MAAK,SAAAC,GACrCL,EAAaK,EAASC,WAEvB,CAACV,IAEJ,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACGT,IACC,UAACL,EAAD,YACE,SAAC,KAAD,CAAMe,GAAE,oBAAEF,EAASG,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAlC,6BACA,UAACpB,EAAD,YACE,gBAAKqB,IAAKC,EAAAA,GAAcd,EAAUe,YAAaC,IAAI,kBACnD,4BACE,wBAAKhB,EAAUiB,SACf,yCACc,uBAAIjB,EAAUkB,mBAE5B,sCACA,uBAAIlB,EAAUmB,YACd,oCACA,uBACGnB,EAAUoB,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACpB,0BAAgBA,GAALD,eAKnB,UAAC5B,EAAD,YACE,oDACA,wBACE,SAAC,KAAD,CAAMgB,GAAG,OAAOC,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAA9C,qBAIF,wBACE,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAAjD,8BAOR,SAAChB,EAAD,WACE,SAAC,EAAA4B,SAAD,CAAUC,UAAU,4CAApB,UACE,SAAC,KAAD,a,iOCvDJC,EAAU,mCAEHZ,EAAc,kCAIpB,SAAea,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EAAS,CAAEA,OAAQ,CAAEC,QAASH,IAD/B,kBAGoBI,IAAAA,IAAU,sBAAuBF,GAHrD,cAGGtB,EAHH,yBAIIA,GAJJ,gCAMHyB,QAAQC,MAAR,MANG,gFAUA,SAAe7B,EAAtB,+CAAO,OAAP,oBAAO,gGAA4BC,EAA5B,EAA4BA,SAC3BwB,EAAS,CAAEA,OAAQ,CAAEC,QAASH,IAD/B,kBAGoBI,IAAAA,IAAA,iBAAoB1B,GAAYwB,GAHpD,cAGGtB,EAHH,yBAIIA,GAJJ,gCAMHyB,QAAQC,MAAR,MANG,gFAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,gGAA2B7B,EAA3B,EAA2BA,SAC1BwB,EAAS,CAAEA,OAAQ,CAAEC,QAASH,IAD/B,kBAGoBI,IAAAA,IAAA,iBAAoB1B,EAApB,YAAwCwB,GAH5D,cAGGtB,EAHH,yBAIIA,GAJJ,gCAMHyB,QAAQC,MAAR,MANG,gFAUA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,gGAA8B9B,EAA9B,EAA8BA,SAC7BwB,EAAS,CAAEA,OAAQ,CAAEC,QAASH,IAD/B,kBAGoBI,IAAAA,IAAA,iBAAoB1B,EAApB,YAAwCwB,GAH5D,cAGGtB,EAHH,yBAIIA,GAJJ,gCAMHyB,QAAQC,MAAR,MANG,gFAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,gGAA8BC,EAA9B,EAA8BA,MAC7BR,EAAS,CAAEA,OAAQ,CAAEC,QAASH,EAASU,MAAAA,IADxC,kBAGoBN,IAAAA,IAAA,gBAA2BF,GAH/C,cAGGtB,EAHH,yBAIIA,GAJJ,gCAMHyB,QAAQC,MAAR,MANG,gFA1CPF,IAAAA,SAAAA,QAHqB","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","services/api-movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 24px;\n  margin-top: 24px;\n  & img {\n    max-height: 370px;\n    max-width: 250px;\n  }\n\n  & span:not(:last-child) {\n    margin-right: 12px;\n  }\n`;\n\nexport const Div = styled.div`\n  font-size: 15px;\n`;\n\nexport const Content = styled.div`\n  margin: 24px;\n  font-size: 15px;\n  & h2 {\n    font-size: 24px;\n    font-weight: 700;\n  }\n  & h3 {\n    font-size: 18px;\n    font-weight: 700;\n  }\n`;\n\nexport const AdditionalInfo = styled.div`\n  margin: 0 24px;\n  padding-bottom: 105px;\n  font-size: 15px;\n  & h2 {\n    font-size: 24px;\n    font-weight: 700;\n  }\n  & h3 {\n    font-size: 18px;\n    font-weight: 700;\n  }\n`;\n","import React, { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovie, API_IMG_URL } from 'services/api-movies';\nimport { AdditionalInfo, Content, Div, MovieCard } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieData, setMovieData] = useState();\n\n  useEffect(() => {\n    fetchMovie({ movie_id: movieId }).then(response => {\n      setMovieData(response.data);\n    });\n  }, [movieId]);\n\n  const location = useLocation();\n\n  return (\n    <section>\n      {movieData && (\n        <Content>\n          <Link to={location.state?.from ?? '/'}>‚Üê Go back</Link>\n          <MovieCard>\n            <img src={API_IMG_URL + movieData.poster_path} alt=\"movie poster\" />\n            <div>\n              <h2>{movieData.title}</h2>\n              <p>\n                User score: <b>{movieData.vote_average}</b>\n              </p>\n              <h3>Overview</h3>\n              <p>{movieData.overview}</p>\n              <h3>Genres</h3>\n              <p>\n                {movieData.genres.map(({ id, name }) => (\n                  <span key={id}>{name}</span>\n                ))}\n              </p>\n            </div>\n          </MovieCard>\n          <Div>\n            <h3>Additional information</h3>\n            <p>\n              <Link to=\"cast\" state={{ from: location.state.from }}>\n                Cast\n              </Link>\n            </p>\n            <p>\n              <Link to=\"reviews\" state={{ from: location.state.from }}>\n                Reviews\n              </Link>\n            </p>\n          </Div>\n        </Content>\n      )}\n      <AdditionalInfo>\n        <Suspense fallback={<section>Loading...</section>}>\n          <Outlet />\n        </Suspense>\n      </AdditionalInfo>\n    </section>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport async function fetchTrending() {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchMovie({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchCast({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchReviews({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function searchMovies({ query }) {\n  const params = { params: { api_key: API_KEY, query } };\n  try {\n    const response = await axios.get(`/search/movie`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n"],"names":["MovieCard","styled","Div","Content","AdditionalInfo","movieId","useParams","useState","movieData","setMovieData","useEffect","fetchMovie","movie_id","then","response","data","location","useLocation","to","state","from","src","API_IMG_URL","poster_path","alt","title","vote_average","overview","genres","map","id","name","Suspense","fallback","API_KEY","fetchTrending","params","api_key","axios","console","error","fetchCast","fetchReviews","searchMovies","query"],"sourceRoot":""}