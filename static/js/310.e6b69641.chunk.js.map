{"version":3,"file":"static/js/310.e6b69641.chunk.js","mappings":"yMAEaA,E,QAAOC,GAAAA,GAAH,mE,SC8BjB,EA5BkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACJ,EAAD,UACGE,EAAOG,OAAS,GACfH,EAAOI,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAA1C,SACGK,KAFID,U,iICVRK,E,QAAOX,GAAAA,KAAH,qE,SCkCjB,EA7Be,WACb,OAA4BY,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQH,EAAaI,IAAI,SAC3BD,IACFE,EAAAA,EAAAA,IAAa,CAAEF,MAAAA,IAASG,MAAK,SAAAC,GAC3BT,EAAUS,EAASC,KAAKC,cAE3B,CAACT,KAGF,gCACE,UAACJ,EAAD,CAAMc,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMT,EAAQQ,EAAEE,OAAOC,SAASX,MAAMY,MAAMC,OAAOC,cACnDhB,EAAgB,CAAEE,MAAAA,KAahB,WACE,kBAAOe,KAAK,OAAOC,KAAK,QAAQC,aAAa,MAAMC,UAAQ,KAC3D,mBAAQH,KAAK,SAAb,uBAEDhC,EAAOG,OAAS,IAAK,SAACiC,EAAA,EAAD,CAAWpC,OAAQA,S,iOC7BzCqC,EAAU,mCAEHC,EAAc,kCAIpB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EAAS,CAAEA,OAAQ,CAAEC,QAASJ,IAD/B,kBAGoBK,IAAAA,IAAU,sBAAuBF,GAHrD,cAGGnB,EAHH,yBAIIA,GAJJ,gCAMHsB,QAAQC,MAAR,MANG,gFAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,gGAA4BC,EAA5B,EAA4BA,SAC3BN,EAAS,CAAEA,OAAQ,CAAEC,QAASJ,IAD/B,kBAGoBK,IAAAA,IAAA,iBAAoBI,GAAYN,GAHpD,cAGGnB,EAHH,yBAIIA,GAJJ,gCAMHsB,QAAQC,MAAR,MANG,gFAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,gGAA2BD,EAA3B,EAA2BA,SAC1BN,EAAS,CAAEA,OAAQ,CAAEC,QAASJ,IAD/B,kBAGoBK,IAAAA,IAAA,iBAAoBI,EAApB,YAAwCN,GAH5D,cAGGnB,EAHH,yBAIIA,GAJJ,gCAMHsB,QAAQC,MAAR,MANG,gFAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,gGAA8BF,EAA9B,EAA8BA,SAC7BN,EAAS,CAAEA,OAAQ,CAAEC,QAASJ,IAD/B,kBAGoBK,IAAAA,IAAA,iBAAoBI,EAApB,YAAwCN,GAH5D,cAGGnB,EAHH,yBAIIA,GAJJ,gCAMHsB,QAAQC,MAAR,MANG,gFAUA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,gGAA8BF,EAA9B,EAA8BA,MAC7BuB,EAAS,CAAEA,OAAQ,CAAEC,QAASJ,EAASpB,MAAAA,IADxC,kBAGoByB,IAAAA,IAAA,gBAA2BF,GAH/C,cAGGnB,EAHH,yBAIIA,GAJJ,gCAMHsB,QAAQC,MAAR,MANG,gFA1CPF,IAAAA,SAAAA,QAHqB","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/api-movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  font-size: 16px;\n  list-style: inside;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { List } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.length > 0 &&\n        movies.map(({ id, title }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n","import MovieList from 'components/MovieList/MovieList';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'services/api-movies';\nimport { Form } from './Movies.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSearch = e => {\n    e.preventDefault();\n    const query = e.target.elements.query.value.trim().toLowerCase();\n    setSearchParams({ query });\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query)\n      searchMovies({ query }).then(response => {\n        setMovies(response.data.results);\n      });\n  }, [searchParams]);\n\n  return (\n    <section>\n      <Form onSubmit={handleSearch}>\n        <input type=\"text\" name=\"query\" autoComplete=\"off\" required></input>\n        <button type=\"submit\">Search</button>\n      </Form>\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport async function fetchTrending() {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchMovie({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchCast({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function fetchReviews({ movie_id }) {\n  const params = { params: { api_key: API_KEY } };\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function searchMovies({ query }) {\n  const params = { params: { api_key: API_KEY, query } };\n  try {\n    const response = await axios.get(`/search/movie`, params);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n}\n"],"names":["List","styled","movies","location","useLocation","length","map","id","title","to","state","from","Form","useState","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","query","get","searchMovies","then","response","data","results","onSubmit","e","preventDefault","target","elements","value","trim","toLowerCase","type","name","autoComplete","required","MovieList","API_KEY","API_IMG_URL","fetchTrending","params","api_key","axios","console","error","fetchMovie","movie_id","fetchCast","fetchReviews"],"sourceRoot":""}